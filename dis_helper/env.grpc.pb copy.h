// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dis_helper/env.proto
#ifndef GRPC_dis_5fhelper_2fenv_2eproto__INCLUDED
#define GRPC_dis_5fhelper_2fenv_2eproto__INCLUDED

#include "dis_helper/env.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace dis {

class DisService final {
 public:
  static constexpr char const* service_full_name() {
    return "dis.DisService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAddressMap(::grpc::ClientContext* context, const ::dis::Empty& request, ::dis::AddressMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::AddressMap>> AsyncGetAddressMap(::grpc::ClientContext* context, const ::dis::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::AddressMap>>(AsyncGetAddressMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::AddressMap>> PrepareAsyncGetAddressMap(::grpc::ClientContext* context, const ::dis::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::AddressMap>>(PrepareAsyncGetAddressMapRaw(context, request, cq));
    }
    virtual ::grpc::Status SendAddress(::grpc::ClientContext* context, const ::dis::Address& request, ::dis::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::Status>> AsyncSendAddress(::grpc::ClientContext* context, const ::dis::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::Status>>(AsyncSendAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::Status>> PrepareAsyncSendAddress(::grpc::ClientContext* context, const ::dis::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::Status>>(PrepareAsyncSendAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::dis::Matrix* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::Matrix>> AsyncGetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::Matrix>>(AsyncGetMatrixFromRemoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::Matrix>> PrepareAsyncGetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dis::Matrix>>(PrepareAsyncGetMatrixFromRemoteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetAddressMap(::grpc::ClientContext* context, const ::dis::Empty* request, ::dis::AddressMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAddressMap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::AddressMap* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAddressMap(::grpc::ClientContext* context, const ::dis::Empty* request, ::dis::AddressMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetAddressMap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::AddressMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SendAddress(::grpc::ClientContext* context, const ::dis::Address* request, ::dis::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendAddress(::grpc::ClientContext* context, const ::dis::Address* request, ::dis::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SendAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo* request, ::dis::Matrix* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMatrixFromRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::Matrix* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo* request, ::dis::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMatrixFromRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dis::AddressMap>* AsyncGetAddressMapRaw(::grpc::ClientContext* context, const ::dis::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dis::AddressMap>* PrepareAsyncGetAddressMapRaw(::grpc::ClientContext* context, const ::dis::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dis::Status>* AsyncSendAddressRaw(::grpc::ClientContext* context, const ::dis::Address& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dis::Status>* PrepareAsyncSendAddressRaw(::grpc::ClientContext* context, const ::dis::Address& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dis::Matrix>* AsyncGetMatrixFromRemoteRaw(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dis::Matrix>* PrepareAsyncGetMatrixFromRemoteRaw(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetAddressMap(::grpc::ClientContext* context, const ::dis::Empty& request, ::dis::AddressMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::AddressMap>> AsyncGetAddressMap(::grpc::ClientContext* context, const ::dis::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::AddressMap>>(AsyncGetAddressMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::AddressMap>> PrepareAsyncGetAddressMap(::grpc::ClientContext* context, const ::dis::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::AddressMap>>(PrepareAsyncGetAddressMapRaw(context, request, cq));
    }
    ::grpc::Status SendAddress(::grpc::ClientContext* context, const ::dis::Address& request, ::dis::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::Status>> AsyncSendAddress(::grpc::ClientContext* context, const ::dis::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::Status>>(AsyncSendAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::Status>> PrepareAsyncSendAddress(::grpc::ClientContext* context, const ::dis::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::Status>>(PrepareAsyncSendAddressRaw(context, request, cq));
    }
    ::grpc::Status GetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::dis::Matrix* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::Matrix>> AsyncGetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::Matrix>>(AsyncGetMatrixFromRemoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::Matrix>> PrepareAsyncGetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dis::Matrix>>(PrepareAsyncGetMatrixFromRemoteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetAddressMap(::grpc::ClientContext* context, const ::dis::Empty* request, ::dis::AddressMap* response, std::function<void(::grpc::Status)>) override;
      void GetAddressMap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::AddressMap* response, std::function<void(::grpc::Status)>) override;
      void GetAddressMap(::grpc::ClientContext* context, const ::dis::Empty* request, ::dis::AddressMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAddressMap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::AddressMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SendAddress(::grpc::ClientContext* context, const ::dis::Address* request, ::dis::Status* response, std::function<void(::grpc::Status)>) override;
      void SendAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::Status* response, std::function<void(::grpc::Status)>) override;
      void SendAddress(::grpc::ClientContext* context, const ::dis::Address* request, ::dis::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SendAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo* request, ::dis::Matrix* response, std::function<void(::grpc::Status)>) override;
      void GetMatrixFromRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::Matrix* response, std::function<void(::grpc::Status)>) override;
      void GetMatrixFromRemote(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo* request, ::dis::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMatrixFromRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dis::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dis::AddressMap>* AsyncGetAddressMapRaw(::grpc::ClientContext* context, const ::dis::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dis::AddressMap>* PrepareAsyncGetAddressMapRaw(::grpc::ClientContext* context, const ::dis::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dis::Status>* AsyncSendAddressRaw(::grpc::ClientContext* context, const ::dis::Address& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dis::Status>* PrepareAsyncSendAddressRaw(::grpc::ClientContext* context, const ::dis::Address& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dis::Matrix>* AsyncGetMatrixFromRemoteRaw(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dis::Matrix>* PrepareAsyncGetMatrixFromRemoteRaw(::grpc::ClientContext* context, const ::dis::MatrixRemoteSynceInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAddressMap_;
    const ::grpc::internal::RpcMethod rpcmethod_SendAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMatrixFromRemote_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAddressMap(::grpc::ServerContext* context, const ::dis::Empty* request, ::dis::AddressMap* response);
    virtual ::grpc::Status SendAddress(::grpc::ServerContext* context, const ::dis::Address* request, ::dis::Status* response);
    virtual ::grpc::Status GetMatrixFromRemote(::grpc::ServerContext* context, const ::dis::MatrixRemoteSynceInfo* request, ::dis::Matrix* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAddressMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAddressMap() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAddressMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAddressMap(::grpc::ServerContext* /*context*/, const ::dis::Empty* /*request*/, ::dis::AddressMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAddressMap(::grpc::ServerContext* context, ::dis::Empty* request, ::grpc::ServerAsyncResponseWriter< ::dis::AddressMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendAddress() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAddress(::grpc::ServerContext* /*context*/, const ::dis::Address* /*request*/, ::dis::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendAddress(::grpc::ServerContext* context, ::dis::Address* request, ::grpc::ServerAsyncResponseWriter< ::dis::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMatrixFromRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMatrixFromRemote() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMatrixFromRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatrixFromRemote(::grpc::ServerContext* /*context*/, const ::dis::MatrixRemoteSynceInfo* /*request*/, ::dis::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMatrixFromRemote(::grpc::ServerContext* context, ::dis::MatrixRemoteSynceInfo* request, ::grpc::ServerAsyncResponseWriter< ::dis::Matrix>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAddressMap<WithAsyncMethod_SendAddress<WithAsyncMethod_GetMatrixFromRemote<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAddressMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAddressMap() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dis::Empty, ::dis::AddressMap>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::dis::Empty* request, ::dis::AddressMap* response) { return this->GetAddressMap(context, request, response); }));}
    void SetMessageAllocatorFor_GetAddressMap(
        ::grpc::experimental::MessageAllocator< ::dis::Empty, ::dis::AddressMap>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dis::Empty, ::dis::AddressMap>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAddressMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAddressMap(::grpc::ServerContext* /*context*/, const ::dis::Empty* /*request*/, ::dis::AddressMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetAddressMap(::grpc::experimental::CallbackServerContext* /*context*/, const ::dis::Empty* /*request*/, ::dis::AddressMap* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendAddress() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dis::Address, ::dis::Status>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::dis::Address* request, ::dis::Status* response) { return this->SendAddress(context, request, response); }));}
    void SetMessageAllocatorFor_SendAddress(
        ::grpc::experimental::MessageAllocator< ::dis::Address, ::dis::Status>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dis::Address, ::dis::Status>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAddress(::grpc::ServerContext* /*context*/, const ::dis::Address* /*request*/, ::dis::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* SendAddress(::grpc::experimental::CallbackServerContext* /*context*/, const ::dis::Address* /*request*/, ::dis::Status* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMatrixFromRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMatrixFromRemote() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dis::MatrixRemoteSynceInfo, ::dis::Matrix>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::dis::MatrixRemoteSynceInfo* request, ::dis::Matrix* response) { return this->GetMatrixFromRemote(context, request, response); }));}
    void SetMessageAllocatorFor_GetMatrixFromRemote(
        ::grpc::experimental::MessageAllocator< ::dis::MatrixRemoteSynceInfo, ::dis::Matrix>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dis::MatrixRemoteSynceInfo, ::dis::Matrix>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMatrixFromRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatrixFromRemote(::grpc::ServerContext* /*context*/, const ::dis::MatrixRemoteSynceInfo* /*request*/, ::dis::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetMatrixFromRemote(::grpc::experimental::CallbackServerContext* /*context*/, const ::dis::MatrixRemoteSynceInfo* /*request*/, ::dis::Matrix* /*response*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_GetAddressMap<ExperimentalWithCallbackMethod_SendAddress<ExperimentalWithCallbackMethod_GetMatrixFromRemote<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAddressMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAddressMap() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAddressMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAddressMap(::grpc::ServerContext* /*context*/, const ::dis::Empty* /*request*/, ::dis::AddressMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendAddress() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAddress(::grpc::ServerContext* /*context*/, const ::dis::Address* /*request*/, ::dis::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMatrixFromRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMatrixFromRemote() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMatrixFromRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatrixFromRemote(::grpc::ServerContext* /*context*/, const ::dis::MatrixRemoteSynceInfo* /*request*/, ::dis::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAddressMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAddressMap() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAddressMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAddressMap(::grpc::ServerContext* /*context*/, const ::dis::Empty* /*request*/, ::dis::AddressMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAddressMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendAddress() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAddress(::grpc::ServerContext* /*context*/, const ::dis::Address* /*request*/, ::dis::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMatrixFromRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMatrixFromRemote() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMatrixFromRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatrixFromRemote(::grpc::ServerContext* /*context*/, const ::dis::MatrixRemoteSynceInfo* /*request*/, ::dis::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMatrixFromRemote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAddressMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAddressMap() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAddressMap(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAddressMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAddressMap(::grpc::ServerContext* /*context*/, const ::dis::Empty* /*request*/, ::dis::AddressMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetAddressMap(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendAddress() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendAddress(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendAddress(::grpc::ServerContext* /*context*/, const ::dis::Address* /*request*/, ::dis::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* SendAddress(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMatrixFromRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMatrixFromRemote() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMatrixFromRemote(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMatrixFromRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatrixFromRemote(::grpc::ServerContext* /*context*/, const ::dis::MatrixRemoteSynceInfo* /*request*/, ::dis::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetMatrixFromRemote(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAddressMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAddressMap() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::dis::Empty, ::dis::AddressMap>(std::bind(&WithStreamedUnaryMethod_GetAddressMap<BaseClass>::StreamedGetAddressMap, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAddressMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAddressMap(::grpc::ServerContext* /*context*/, const ::dis::Empty* /*request*/, ::dis::AddressMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAddressMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dis::Empty,::dis::AddressMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendAddress() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::dis::Address, ::dis::Status>(std::bind(&WithStreamedUnaryMethod_SendAddress<BaseClass>::StreamedSendAddress, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendAddress(::grpc::ServerContext* /*context*/, const ::dis::Address* /*request*/, ::dis::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dis::Address,::dis::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMatrixFromRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMatrixFromRemote() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::dis::MatrixRemoteSynceInfo, ::dis::Matrix>(std::bind(&WithStreamedUnaryMethod_GetMatrixFromRemote<BaseClass>::StreamedGetMatrixFromRemote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMatrixFromRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMatrixFromRemote(::grpc::ServerContext* /*context*/, const ::dis::MatrixRemoteSynceInfo* /*request*/, ::dis::Matrix* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMatrixFromRemote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dis::MatrixRemoteSynceInfo,::dis::Matrix>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAddressMap<WithStreamedUnaryMethod_SendAddress<WithStreamedUnaryMethod_GetMatrixFromRemote<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAddressMap<WithStreamedUnaryMethod_SendAddress<WithStreamedUnaryMethod_GetMatrixFromRemote<Service > > > StreamedService;
};

}  // namespace dis


#endif  // GRPC_dis_5fhelper_2fenv_2eproto__INCLUDED
